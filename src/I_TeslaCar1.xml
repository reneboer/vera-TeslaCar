<?xml version="1.0"?>
<!-- 
	I_TeslaCar1.xml; Vera/openLuup "TeslaCar" Plug-in 
	Written by Rene Boer
	V1.15 13 August 2020
-->
<implementation>
	<settings>
		<protocol>crlf</protocol>
	</settings>
	<files>L_TeslaCar1.lua</files>  
	<startup>TeslaCarModule_Initialize</startup>
	<actionList>
		<action>
			<name>flashLights</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				CarModule.StartAction("flashLights")
				return 4, nil
			</job>
			<jobname>flashLights</jobname>
		</action>
		<action>
			<name>honkHorn</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				CarModule.StartAction("honkHorn")
				return 4, nil
			</job>
			<jobname>honkHorn</jobname>
		</action>
		<action>
			<name>lockDoors</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				CarModule.StartAction("lockDoors")
				return 4, nil
			</job>
			<jobname>lockDoors</jobname>
		</action>
		<action>
			<name>unlockDoors</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				CarModule.StartAction("unlockDoors")
				return 4, nil
			</job>
			<jobname>unlockDoors</jobname>
		</action>
		<action>
			<name>unlockFrunc</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				CarModule.StartAction("unlockFrunc")
				return 4, nil
			</job>
			<jobname>unlockFrunc</jobname>
		</action>
		<action>
			<name>unlockTrunc</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				CarModule.StartAction("unlockTrunc")
				return 4, nil
			</job>
			<jobname>unlockTrunc</jobname>
		</action>
		<action>
			<name>lockTrunc</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				CarModule.StartAction("lockTrunc")
				return 4, nil
			</job>
			<jobname>lockTrunc</jobname>
		</action>
		<action>
			<name>openChargePort</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				CarModule.StartAction("openChargePort")
				return 4, nil
			</job>
			<jobname>openChargePort</jobname>
		</action>
		<action>
			<name>closeChargePort</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				CarModule.StartAction("closeChargePort")
				return 4, nil
			</job>
			<jobname>closeChargePort</jobname>
		</action>
		<action>
			<name>ventSunroof</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				CarModule.StartAction("ventSunroof")
				return 4, nil
			</job>
			<jobname>ventSunroof</jobname>
		</action>
		<action>
			<name>closeSunroof</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				CarModule.StartAction("closeSunroof")
				return 4, nil
			</job>
			<jobname>closeSunroof</jobname>
		</action>
		<action>
			<name>ventWindows</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				CarModule.StartAction("ventWindows")
				return 4, nil
			</job>
			<jobname>ventWindows</jobname>
		</action>
		<action>
			<name>closeWindows</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				CarModule.StartAction("closeWindows")
				return 4, nil
			</job>
			<jobname>closeWindows</jobname>
		</action>
		<action>
			<name>prepareDeparture</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				-- Run commands to stop charging and release cable (I hope)
				-- See if charging. If so stop
				if var.GetNumber("ChargeStatus") == 1 then
					var.Set("ChargeStatus", 0)
					CarModule.StartAction("setChargeLimit", 50)
					CarModule.StartAction("stopCharge")
					CarModule.StartAction("setChargeLimit", var.GetNumber("StandardChargeLimit"))
				end
				-- See if climate is on. Do not stop this as climate will remain stopped when you start driving.
--				if var.GetNumber("ClimateStatus") == 1 then
--					var.Set("ClimateStatus", 0)
--					CarModule.StartAction("stopClimate")
--				end
				-- Unlock the doors so the charge port will release the cable when disconnecting from charge station.
				CarModule.StartAction("unlockDoors")
				return 4, nil
			</job>
			<jobname>prepareDeparture</jobname>
		</action>
		<action>
			<name>startCharge</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				-- Set charge limit back to desired value to assure charging will start
				var.Set("ChargeStatus", 1)
--	Goes to quickly			CarModule.StartAction("setChargeLimit", var.GetNumber("StandardChargeLimit"))
				CarModule.StartAction("startCharge")
				return 4, nil
			</job>
			<jobname>startCharge</jobname>
		</action>
		<action>
			<name>stopCharge</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				-- Set low charge limit to assure charging will stop.
				var.Set("ChargeStatus", 0)
				CarModule.StartAction("setChargeLimit", 50)
				CarModule.StartAction("stopCharge")
				CarModule.StartAction("setChargeLimit", var.GetNumber("StandardChargeLimit"))
				return 4, nil
			</job>
			<jobname>stopCharge</jobname>
		</action>
		<action>
			<name>setChargeLimit</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				CarModule.StartAction("setChargeLimit", lul_settings.newTargetValue or "90")
				return 4, nil
			</job>
			<jobname>setChargeLimit</jobname>
		</action>
		<action>
			<name>setStandardChargeLimit</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				CarModule.StartAction("setStandardChargeLimit")
				return 4, nil
			</job>
			<jobname>setStandardChargeLimit</jobname>
		</action>
		<action>
			<name>setMaximumChargeLimit</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				CarModule.StartAction("setMaximumChargeLimit")
				return 4, nil
			</job>
			<jobname>setMaximumChargeLimit</jobname>
		</action>
		<action>
			<name>startClimate</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				var.Set("ClimateStatus", 1)
				CarModule.StartAction("startClimate")
				return 4, nil
			</job>
			<jobname>startClimate</jobname>
		</action>
		<action>
			<name>stopClimate</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				var.Set("ClimateStatus", 0)
				CarModule.StartAction("stopClimate")
				return 4, nil
			</job>
			<jobname>stopClimate</jobname>
		</action>
		<action>
			<name>startSentryMode</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				var.Set("SentryMode", 1)
				CarModule.StartAction("startSentryMode")
				return 4, nil
			</job>
			<jobname>startSentryMode</jobname>
		</action>
		<action>
			<name>stopSentryMode</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				var.Set("SentryMode", 0)
				CarModule.StartAction("stopSentryMode")
				return 4, nil
			</job>
			<jobname>stopSentryMode</jobname>
		</action>
		<action>
			<name>setTemperature</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				-- Need to convert temp as Tesla uses C
				local temp = lul_settings.newTargetValue
				if pD.veraTemperatureScale ~= "C" then temp = utils.FtoC(temp) end	
				CarModule.StartAction("setTemperature", temp or "20")
				return 4, nil
			</job>
			<jobname>setTemperature</jobname>
		</action>
		<action>
			<name>updateSoftware</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				CarModule.StartAction("updateSoftware")
				return 4, nil
			</job>
			<jobname>updateSoftware</jobname>
		</action>
		<action>
			<name>setAutoSoftwareInstall</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<run>
				var.Set("AutoSoftwareInstall",lul_settings.newTargetValue or "0")
			</run>
		</action>
		<action>
			<name>updateChildren</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				CarModule.UpdateChildren()
				return 4, nil
			</job>
			<jobname>updateChildren</jobname>
		</action>
		<action>
			<name>Reset</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<run>
				CarModule.Reset()
				return 4, nil
			</run>
		</action>
		<action>
			<name>Login</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				CarModule.Login()
				return 4, nil
			</job>
			<jobname>Login</jobname>
		</action>
		<action>
			<name>Poll</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<job>
				CarModule.Poll()
				return 4, nil
			</job>
			<jobname>Poll</jobname>
		</action>
		<action>
			<name>SetLogLevel</name>
			<serviceId>urn:rboer-com:serviceId:TeslaCar1</serviceId>
			<run>
				local lev = tonumber(lul_settings.newLogLevel, 10) or 3
				var.Set("LogLevel", lev)
				log.Update(lev)
			</run>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:SwitchPower1</serviceId>
			<name>SetTarget</name>
			<job>
				TeslaCar_Child_SetTarget(lul_settings.newTargetValue, lul_device)
				return 4, nil
			</job>
			<jobname>SetTarget</jobname>
		</action>
		<action>
			<serviceId>urn:micasaverde-com:serviceId:DoorLock1</serviceId>
			<name>SetTarget</name>
			<job>
				TeslaCar_Child_SetTarget(lul_settings.newTargetValue, lul_device)
				return 4, nil
			</job>
			<jobname>SetTarget</jobname>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:Dimming1</serviceId>
			<name>SetLoadLevelTarget</name>
			<job>
				TeslaCar_Child_SetLoadLevelTarget(lul_settings.newLoadlevelTarget, lul_device)
			</job>
			<jobname>SetLoadLevelTarget</jobname>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:HVAC_UserOperatingMode1</serviceId>
			<name>SetModeTarget</name>
			<job>
				-- On ALTUI I get NewMode?
				local newMode = lul_settings.NewModeTarget or lul_settings.NewMode
				TeslaCar_Child_SetModeTarget(newMode, lul_device)
			</job>
			<jobname>SetModeTarget</jobname>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:TemperatureSetpoint1</serviceId>
			<name>SetCurrentSetpoint</name>
			<job>
				-- Need to convert temp as Tesla uses C
				local temp = lul_settings.NewCurrentSetpoint
				if pD.veraTemperatureScale ~= "C" then temp = utils.FtoC(temp) end	
				TeslaCar_Child_SetCurrentSetpoint(temp, lul_device)
			</job>
			<jobname>SetCurrentSetpoint</jobname>
		</action>
	</actionList>
</implementation>